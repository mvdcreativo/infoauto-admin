{"version":3,"sources":["webpack:///src/app/web/admin/setting-api/tipo-vehicle/tipo-vehicle.component.html","webpack:///src/app/web/admin/setting-api/tipo-vehicle/tipo-vehicle.component.ts","webpack:///src/app/web/admin/setting-api/models-vehicles/models.component.html","webpack:///src/app/web/admin/setting-api/models-vehicles/models.component.ts","webpack:///src/app/web/admin/setting-api/brands/brands.component.html","webpack:///src/app/web/admin/setting-api/brands/brands.component.ts","webpack:///src/app/web/admin/setting-api/submodel/submodel.component.html","webpack:///src/app/web/admin/setting-api/submodel/submodel.component.ts","webpack:///src/app/web/admin/setting-api/attributes/attributes.component.html","webpack:///src/app/web/admin/setting-api/extras/extras.component.html","webpack:///src/app/web/admin/setting-api/extras/extras.component.ts","webpack:///src/app/web/admin/setting-api/attributes/attributes.component.ts","webpack:///src/app/web/admin/setting-api/setting-api-routing.module.ts","webpack:///src/app/web/admin/setting-api/setting-api.module.ts"],"names":["TipoVehicleComponent","_settingsService","fb","_snackBar","displayedColumns","mostrar","idUpdate","this","createForm","getCategories","formAdd","group","name","required","getCategory","subscribe","res","tipe_vehicle","reverse","dataSource","addCategory","value","console","log","openSnackBar","reset","err","id","deleteCategory","element","edit","setValue","updateCategory","estado","filterValue","filter","trim","toLowerCase","applyFilter","ModelsComponent","urlFiles","environment","control","selectBrand","getModels","addModel","data","brand_id","controls","deleteModel","vehicleModel","paginator","compose","autocompleteObjectValidator","selectChanges","getBrands","brands","filteredOptions","valueChanges","pipe","startWith","map","_filter","slice","brand","option","indexOf","setTimeout","updateModel","BrandsComponent","getBrand","sort","a","b","addBrand","formData","FormData","append","selectedImage","deleteBrand","get","updateBrand","e","target","files","selectedFiles","SubmodelComponent","getSubModel","addSubModel","model_id","vehicle_model_id","filteredOptionsBrand","filteredOptionsModel","table","tabla","subModel","vehicle_models","selectChangesModel","selectChangesBrand","oculta","vehicle_model","updateSubModel","deleteSubModel","ExtrasComponent","AttributesComponent","SettingApiRoutingModule","routes","path","component","getAttributes","attribute_id","attributes","addAttribute","deleteAttribute","getExtras","extras","addExtra","deleteExtra","forChild","SettingApiModule"],"mappings":"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","file":"x","sourcesContent":["<div class=\"content\">\r\n    <mat-card>\r\n        <ng-container *ngIf=\"mostrar; then muestra; else oculto\"></ng-container>\r\n        <ng-template #muestra>\r\n            <form [formGroup]=\"formAdd\">\r\n                <mat-form-field class=\"add\">\r\n                    <input formControlName=\"name\" matInput placeholder=\"Nueva categoría de vehículos\">\r\n                </mat-form-field>\r\n                <button *ngIf=\"!edit\" class=\"btn\" (click)=\"onSubmit()\" [disabled]=\"!formAdd.valid\" mat-button>Agregar</button>\r\n                <button *ngIf=\"edit\" class=\"btn\" (click)=\"update(idUpdate)\" [disabled]=\"!formAdd.valid\" mat-button>Guardar Cambio</button>\r\n\r\n                <button class=\"no-shadow\" mat-mini-fab aria-label=\"Agregar Nuevo\" (click)=\"oculta(mostrar = !mostrar)\">\r\n                    <mat-icon>close</mat-icon>\r\n                </button>\r\n            </form>\r\n        </ng-template>\r\n        <ng-template #oculto>\r\n            <button class=\"btn\" mat-mini-fab aria-label=\"Agregar Nuevo\" (click)=\"mostrar = !mostrar\">\r\n                <mat-icon>add</mat-icon>\r\n            </button>\r\n        </ng-template>\r\n\r\n\r\n        <mat-form-field>\r\n            <input matInput (keyup)=\"applyFilter($event.target.value)\" placeholder=\"Filtrar\">\r\n        </mat-form-field>\r\n\r\n\r\n        <table mat-table [dataSource]=\"dataSource\" class=\"mat-elevation-z8\">\r\n\r\n            <!-- ID Column -->\r\n            <ng-container matColumnDef=\"id\">\r\n                <th mat-header-cell *matHeaderCellDef> ID </th>\r\n                <td mat-cell *matCellDef=\"let element\"> {{element.id}} </td>\r\n            </ng-container>\r\n\r\n            <!-- name Column -->\r\n            <ng-container matColumnDef=\"name\">\r\n                <th mat-header-cell *matHeaderCellDef> Nombre </th>\r\n                <td mat-cell *matCellDef=\"let element\"> {{element.name}} </td>\r\n            </ng-container>\r\n\r\n            <ng-container matColumnDef=\"acciones\">\r\n                <th mat-header-cell *matHeaderCellDef> Accioes </th>\r\n                <td class=\"acciones\" mat-cell *matCellDef=\"let element\">\r\n                    <button mat-icon-button color=\"warn\" aria-label=\"Eliminar Registro\" (click)=\"deleteReg(element.id)\">\r\n                        <mat-icon>delete</mat-icon>\r\n                    </button>\r\n                    <button mat-icon-button class=\"ico-edit\" aria-label=\"Editar Registro\" (click)=\"openEdit(element)\">\r\n                        <mat-icon>edit</mat-icon>\r\n                    </button>\r\n                </td>\r\n            </ng-container>\r\n\r\n            <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n            <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n        </table>\r\n    </mat-card>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { SettingApiService } from '../services/setting-api.service';\r\nimport { VehicleCategory } from 'src/app/interfaces/resultado';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  templateUrl: './tipo-vehicle.component.html',\r\n  styleUrls: ['./tipo-vehicle.component.scss']\r\n})\r\nexport class TipoVehicleComponent implements OnInit {\r\n  tipe_vehicle: VehicleCategory[];\r\n  displayedColumns: string[] = ['id', 'name', 'acciones'];\r\n  dataSource: any;\r\n\r\n  formAdd: FormGroup\r\n  mostrar: boolean = false;\r\n  edit: boolean;\r\n  idUpdate: number = null;\r\n\r\n\r\n  constructor(\r\n    private _settingsService: SettingApiService,\r\n    private fb: FormBuilder,\r\n    private _snackBar: MatSnackBar\r\n\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.createForm();\r\n    this.getCategories();\r\n  }\r\n\r\n  createForm() {\r\n    this.formAdd = this.fb.group({\r\n      name: [null, Validators.required]\r\n    })\r\n  }\r\n\r\n  getCategories() {\r\n    this._settingsService.getCategory().subscribe(\r\n      (res: any) => {\r\n        this.tipe_vehicle = res.reverse();\r\n        // console.log(res);\r\n\r\n        this.dataSource = new MatTableDataSource(this.tipe_vehicle);\r\n      }\r\n    );\r\n  }\r\n\r\n  onSubmit() {\r\n    this.addCategory();\r\n  }\r\n\r\n  addCategory() {\r\n    const data = this.formAdd.value;\r\n    this._settingsService.addCategory(data).subscribe(\r\n      res => {\r\n        console.log(res);\r\n        this._settingsService.openSnackBar('success', `Tipo ${res.name} creado con éxito!!`)\r\n        this.getCategories()\r\n        this.formAdd.reset();\r\n        this.mostrar = false;\r\n      },\r\n      err => {\r\n        console.log(err);\r\n\r\n        this._settingsService.openSnackBar('error', `${err}`)\r\n      },\r\n    )\r\n  }\r\n\r\n  deleteReg(id: number) {\r\n    this._settingsService.deleteCategory(id).subscribe(\r\n      res => {\r\n        this._settingsService.openSnackBar('success', `Tipo \"${res.name}\" eliminado con éxito!!`)\r\n        this.getCategories()\r\n        this.formAdd.reset();\r\n        this.mostrar = false;\r\n      },\r\n      err => {\r\n        this._settingsService.openSnackBar('success', err)\r\n\r\n      }\r\n    )\r\n  }\r\n\r\n  ///////EDIT\r\n  openEdit(element: any) {\r\n    this.mostrar = false;\r\n    this.formAdd.reset();\r\n    this.edit = false;\r\n    this.edit = true;\r\n    this.formAdd.setValue(\r\n      {\r\n        name: element.name,\r\n      }\r\n    )\r\n    this.idUpdate = element.id;\r\n    this.mostrar = true;\r\n    console.log(element);\r\n\r\n  }\r\n\r\n  update(id:number) {\r\n    const data = this.formAdd.value;\r\n    \r\n    this._settingsService.updateCategory(id, data).subscribe(\r\n      res => {\r\n        console.log(res);\r\n        this._settingsService.openSnackBar('success', `Tipo ${res.name} Actualizado con éxito!!`)\r\n        this.getCategories()\r\n        this.formAdd.reset();\r\n        this.mostrar = false;\r\n        this.idUpdate = null;\r\n      },\r\n      err => {\r\n        console.log(err);\r\n\r\n        this._settingsService.openSnackBar('error', `${err}`)\r\n      },\r\n    )\r\n  }  \r\n  \r\n  oculta(estado) {\r\n    this.edit = false;\r\n    this.formAdd.reset();\r\n    this.mostrar = estado\r\n  }\r\n  //////////\r\n\r\n  applyFilter(filterValue: string) {\r\n    this.dataSource.filter = filterValue.trim().toLowerCase();\r\n  }\r\n\r\n\r\n\r\n}\r\n","<div class=\"content\">\r\n    <mat-card>\r\n        <ng-container *ngIf=\"mostrar; then muestra; else oculto\"></ng-container>\r\n        <ng-template #muestra>\r\n            <form [formGroup]=\"formAdd\">\r\n                <mat-form-field class=\"brand\">\r\n                    <input type=\"text\" placeholder=\"Selecciona la Marca\" aria-label=\"Selecciona la Marca\" matInput\r\n                        formControlName=\"brand_id\" [matAutocomplete]=\"auto\">\r\n                    <mat-autocomplete #auto=\"matAutocomplete\" [displayWith]=\"displayFn\">\r\n                        <mat-option *ngFor=\"let option of filteredOptions | async\" [value]=\"option\">\r\n                            {{option.name}}\r\n                        </mat-option>\r\n                    </mat-autocomplete>\r\n                </mat-form-field>\r\n                <mat-form-field class=\"add\">\r\n                    <input formControlName=\"name\" matInput placeholder=\"Nuevo modelo\">\r\n                </mat-form-field>\r\n                <button *ngIf=\"!edit\" class=\"btn\" (click)=\"onSubmit()\" [disabled]=\"!formAdd.valid\" mat-button>Agregar</button>\r\n                <button *ngIf=\"edit\" class=\"btn\" (click)=\"update(idUpdate)\" [disabled]=\"!formAdd.valid\" mat-button>Guardar Cambio</button>\r\n\r\n                <button class=\"no-shadow\" mat-mini-fab aria-label=\"Agregar Nuevo\" (click)=\"oculta(mostrar = !mostrar)\">\r\n                    <mat-icon>close</mat-icon>\r\n                </button>\r\n            </form>\r\n        </ng-template>\r\n        <ng-template #oculto>\r\n            <button class=\"btn\" mat-mini-fab aria-label=\"Agregar Nuevo\" (click)=\"mostrar = !mostrar\">\r\n                <mat-icon>add</mat-icon>\r\n            </button>\r\n        </ng-template>\r\n\r\n        <mat-form-field>\r\n            <input matInput (keyup)=\"applyFilter($event.target.value)\" placeholder=\"Filtrar\">\r\n        </mat-form-field>\r\n        <table mat-table [dataSource]=\"dataSource\" class=\"mat-elevation-z8\">\r\n\r\n            <!-- ID Column -->\r\n            <ng-container matColumnDef=\"id\">\r\n                <th mat-header-cell *matHeaderCellDef> ID </th>\r\n                <td mat-cell *matCellDef=\"let element\"> {{element.id}} </td>\r\n            </ng-container>\r\n\r\n            <!-- name Column -->\r\n            <ng-container matColumnDef=\"name\">\r\n                <th mat-header-cell *matHeaderCellDef> Nombre </th>\r\n                <td mat-cell *matCellDef=\"let element\"> {{element.name}} </td>\r\n            </ng-container>\r\n\r\n            <!-- brand Column -->\r\n            <ng-container matColumnDef=\"brand\">\r\n                <th mat-header-cell *matHeaderCellDef> Marca </th>\r\n                <td mat-cell *matCellDef=\"let element\">\r\n                    <span>{{element.brand.name}}</span>\r\n                </td>\r\n            </ng-container>\r\n            <ng-container matColumnDef=\"image_url\">\r\n                <th mat-header-cell *matHeaderCellDef> Logo </th>\r\n                <td mat-cell *matCellDef=\"let element\">\r\n                    <img class=\"image\" [src]=\"urlFiles+element.brand.image_url\">\r\n                </td>\r\n            </ng-container>\r\n\r\n            <ng-container matColumnDef=\"acciones\">\r\n                <th mat-header-cell *matHeaderCellDef> Accioes </th>\r\n                <td class=\"acciones\" mat-cell *matCellDef=\"let element\">\r\n                    <button mat-icon-button color=\"warn\" \r\n                    aria-label=\"Eliminar Registro\"\r\n                    (click)=\"deleteReg(element.id)\">\r\n                        <mat-icon>delete</mat-icon>\r\n                    </button>\r\n                    <button mat-icon-button class=\"ico-edit\" aria-label=\"Editar Registro\" (click)=\"openEdit(element)\">\r\n                        <mat-icon>edit</mat-icon>\r\n                    </button>\r\n                </td>\r\n            </ng-container>\r\n\r\n            <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n            <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n\r\n        </table>\r\n        <mat-paginator [pageSizeOptions]=\"[20,50,100]\" showFirstLastButtons></mat-paginator>\r\n\r\n    </mat-card>\r\n</div>","import { Component, OnInit, ViewChild } from '@angular/core';\r\n\r\nimport { SettingApiService } from '../services/setting-api.service';\r\nimport { VehicleModel, Brand } from 'src/app/interfaces/resultado';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { environment } from 'src/environments/environment';\r\nimport { FormBuilder, FormGroup, Validators, FormControl, ValidatorFn, AbstractControl } from '@angular/forms';\r\nimport { startWith, map } from 'rxjs/operators';\r\nimport { Observable } from 'rxjs';\r\n\r\n\r\n\r\n@Component({\r\n  templateUrl: './models.component.html',\r\n  styleUrls: ['./models.component.scss']\r\n})\r\nexport class ModelsComponent implements OnInit {\r\n  displayedColumns: string[] = ['id', 'name', 'brand', 'image_url', 'acciones'];\r\n  vehicleModel: VehicleModel[];\r\n  brands: Brand [];\r\n  dataSource: any;\r\n  urlFiles = `${environment.urlFiles}`;\r\n\r\n  formAdd: FormGroup\r\n  mostrar: boolean = false;\r\n  filteredOptions: Observable<Brand[]>;\r\n\r\n  @ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;\r\n  edit: boolean;\r\n  idUpdate: number;\r\n  \r\n  constructor(\r\n    private _settingsService: SettingApiService,\r\n    private fb: FormBuilder,\r\n    private _snackBar: MatSnackBar,\r\n  ) { }\r\n\r\n////VALIDA CAMPO AUTOCOMPLETE\r\n  autocompleteObjectValidator(): ValidatorFn {\r\n    return (control: AbstractControl): { [key: string]: any } | null => {\r\n      if (typeof control.value === 'string') {\r\n        return { 'invalidAutocompleteObject': { value: control.value } }\r\n      }\r\n      return null  /* valid option selected */\r\n    }\r\n  }\r\n////\r\n\r\n  ngOnInit() {\r\n    this.selectBrand()\r\n    \r\n    this.getModels();\r\n  }\r\n\r\n  onSubmit() {\r\n    this.addModel();\r\n  }\r\n\r\n  addModel() {\r\n    const data = {\r\n      brand_id : this.formAdd.controls.brand_id.value.id,\r\n      name: this.formAdd.controls.name.value\r\n    }\r\n\r\n    console.log(data);\r\n    \r\n    this._settingsService.addModel(data).subscribe(\r\n      res => {\r\n        console.log(res);\r\n        this._settingsService.openSnackBar('success', `Modelo ${res.name} creado con éxito!!`)\r\n        this.getModels()\r\n        this.formAdd.reset();\r\n        this.mostrar = false;\r\n      },\r\n      err => {\r\n        console.log(err);\r\n\r\n        this._settingsService.openSnackBar('error', `${err}`)\r\n      },\r\n    )\r\n  }\r\n\r\n  deleteReg(id: number) {\r\n    this._settingsService.deleteModel(id).subscribe(\r\n      res => {\r\n        this._settingsService.openSnackBar('success', `Modelo \"${res.name}\" eliminado con éxito!!`)\r\n        this.getModels()\r\n        this.formAdd.reset();\r\n        this.mostrar = false;\r\n      },\r\n      err => {\r\n        this._settingsService.openSnackBar('success', err)\r\n\r\n      }\r\n    )\r\n  }\r\n\r\n  getModels() {\r\n    this._settingsService.getModels().subscribe(\r\n      (res: any) => {\r\n        this.vehicleModel = res.reverse();\r\n        this.dataSource = new MatTableDataSource(this.vehicleModel);\r\n        this.dataSource.paginator = this.paginator;\r\n      }\r\n    );\r\n  }\r\n\r\n  createForm() {\r\n    this.formAdd = this.fb.group({\r\n      name: [null, Validators.required],\r\n      brand_id: [null, Validators.compose(\r\n        [Validators.required, this.autocompleteObjectValidator()]\r\n      )]\r\n    })\r\n    this.selectChanges()\r\n  }\r\n\r\n  /// INPUT SELECT MARCA autocomplete\r\n  selectBrand() {\r\n    this._settingsService.getBrands().subscribe(\r\n        (brands: any) => {\r\n          this.brands = brands\r\n          this.createForm();\r\n          \r\n          console.log(brands)\r\n        }\r\n      );\r\n  }\r\n\r\n  selectChanges(){\r\n    if(this.brands){\r\n      this.filteredOptions = this.formAdd.controls.brand_id.valueChanges\r\n      .pipe(\r\n        startWith(''),\r\n        map(value => typeof value === 'string' ? value : value.name),\r\n        map(name => name ? this._filter(name) : this.brands.slice())\r\n        \r\n      );\r\n    }\r\n  }\r\n\r\n  displayFn(brand?: Brand): string | undefined {\r\n    return brand ? brand.name : undefined;\r\n  }\r\n\r\n  private _filter(name: string): Brand[] {\r\n    const filterValue = name.toLowerCase();\r\n\r\n    return this.brands.filter(option => option.name.toLowerCase().indexOf(filterValue) === 0);\r\n  }\r\n\r\n\r\n\r\n  ////////\r\n\r\n   ///////EDIT\r\n   openEdit(element: any) {\r\n    this.mostrar = false;\r\n    this.formAdd.reset();\r\n    this.edit = false;\r\n    this.edit = true;\r\n    setTimeout(() => {\r\n    this.formAdd.setValue(\r\n      {\r\n        name: element.name,\r\n        brand_id: element.brand\r\n      }\r\n    )\r\n    this.idUpdate = element.id;\r\n    this.mostrar = true;\r\n    console.log(element);\r\n    },500)\r\n  }\r\n\r\n  update(id:number) {\r\n    \r\n    const data = {\r\n      brand_id : this.formAdd.controls.brand_id.value.id,\r\n      name: this.formAdd.controls.name.value\r\n    }\r\n    console.log(data);\r\n    \r\n    this._settingsService.updateModel(id, data).subscribe(\r\n      res => {\r\n        console.log(res);\r\n        this._settingsService.openSnackBar('success', `Modelo ${res.name} Actualizado con éxito!!`)\r\n        this.getModels()\r\n        this.formAdd.reset();\r\n        this.mostrar = false;\r\n        this.idUpdate = null;\r\n      },\r\n      err => {\r\n        console.log(err);\r\n        this._settingsService.openSnackBar('error', `${err}`)\r\n      },\r\n    )\r\n  }  \r\n  \r\n  oculta(estado) {\r\n    this.edit = false;\r\n    this.formAdd.reset();\r\n    this.mostrar = estado\r\n  }\r\n  //////////\r\n\r\n  applyFilter(filterValue: string) {\r\n    this.dataSource.filter = filterValue.trim().toLowerCase();\r\n  }\r\n\r\n\r\n\r\n\r\n}\r\n","<div class=\"content\">\r\n    <mat-card>\r\n        <ng-container *ngIf=\"mostrar; then muestra; else oculto\"></ng-container>\r\n        <ng-template #muestra>\r\n            <form [formGroup]=\"formAdd\">\r\n                <mat-form-field class=\"add\">\r\n                    <input formControlName=\"name\" matInput placeholder=\"Nueva Marca de vehículos\">\r\n                </mat-form-field>\r\n                    <label for=\"image\">\r\n                        <!-- <img class=\"img\" [src]=\"image.url\" alt=\"\"> -->\r\n                        <a mat-button class=\"btn\">\r\n                            <i class=\"material-icons\">add_photo_alternate</i> \r\n                            Imagen\r\n                        </a>\r\n                    </label>\r\n                    <input type=\"file\" (change)=\"changeImage($event)\" hidden id=\"image\">\r\n                \r\n                    <button *ngIf=\"!edit\" class=\"btn\" (click)=\"onSubmit()\" [disabled]=\"!formAdd.valid\" mat-button>Agregar</button>\r\n                    <button *ngIf=\"edit\" class=\"btn\" (click)=\"update(idUpdate)\" [disabled]=\"!formAdd.valid\" mat-button>Guardar Cambio</button>\r\n\r\n                    <button class=\"no-shadow\" mat-mini-fab aria-label=\"Agregar Nuevo\" (click)=\"oculta(mostrar = !mostrar)\">\r\n                        <mat-icon>close</mat-icon>\r\n                    </button>\r\n            </form>\r\n        </ng-template>\r\n        <ng-template #oculto>\r\n            <button class=\"btn\" mat-mini-fab aria-label=\"Agregar Nuevo\"\r\n            (click)=\"mostrar = !mostrar\">\r\n                <mat-icon>add</mat-icon>\r\n            </button>\r\n        </ng-template>\r\n\r\n        <mat-form-field>\r\n            <input matInput (keyup)=\"applyFilter($event.target.value)\" placeholder=\"Filtrar\">\r\n        </mat-form-field>\r\n\r\n        <table mat-table [dataSource]=\"dataSource\" class=\"mat-elevation-z8\">\r\n\r\n            <!-- ID Column -->\r\n            <ng-container matColumnDef=\"id\">\r\n                <th mat-header-cell *matHeaderCellDef> ID </th>\r\n                <td mat-cell *matCellDef=\"let element\"> {{element.id}} </td>\r\n            </ng-container>\r\n\r\n            <!-- name Column -->\r\n            <ng-container matColumnDef=\"name\">\r\n                <th mat-header-cell *matHeaderCellDef> Nombre </th>\r\n                <td mat-cell *matCellDef=\"let element\"> {{element.name}} </td>\r\n            </ng-container>\r\n\r\n            <!-- name Column -->\r\n            <ng-container matColumnDef=\"image_url\">\r\n                <th mat-header-cell *matHeaderCellDef> Logo </th>\r\n                <td mat-cell *matCellDef=\"let element\"> \r\n                    <img class=\"image\" [src]=\"urlFiles+element.image_url\" alt=\"\"> \r\n                </td>\r\n            </ng-container>\r\n\r\n            <ng-container matColumnDef=\"acciones\">\r\n                <th mat-header-cell *matHeaderCellDef> Accioes </th>\r\n                <td class=\"acciones\" mat-cell *matCellDef=\"let element\">\r\n                    <button mat-icon-button color=\"warn\" \r\n                    aria-label=\"Eliminar Registro\"\r\n                    (click)=\"deleteReg(element.id)\">\r\n                        <mat-icon>delete</mat-icon>\r\n                    </button>\r\n                    <button mat-icon-button class=\"ico-edit\" aria-label=\"Editar Registro\" (click)=\"openEdit(element)\">\r\n                        <mat-icon>edit</mat-icon>\r\n                    </button>\r\n                </td>\r\n            </ng-container>\r\n            <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n            <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n        </table>\r\n        <mat-paginator [pageSizeOptions]=\"[20,50,100]\" showFirstLastButtons></mat-paginator>\r\n    </mat-card>\r\n</div>","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport {MatTableDataSource} from '@angular/material/table';\r\nimport { SettingApiService } from '../services/setting-api.service';\r\nimport { Brand } from 'src/app/interfaces/resultado';\r\nimport { environment } from 'src/environments/environment';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\n\r\n\r\n@Component({\r\n  templateUrl: './brands.component.html',\r\n  styleUrls: ['./brands.component.scss']\r\n})\r\nexport class BrandsComponent implements OnInit {\r\n  brand: Brand [];\r\n  displayedColumns: string[] = ['id', 'name', 'image_url', 'acciones' ];\r\n  dataSource: any;\r\n  formAdd : FormGroup\r\n  mostrar :boolean = false;\r\n  urlFiles= `${environment.urlFiles}`;\r\n  selectedImage: FileList;\r\n  idUpdate: any;\r\n  edit: boolean;\r\n\r\n  constructor(\r\n    private _settingsService: SettingApiService,\r\n    private fb: FormBuilder,\r\n    private _snackBar: MatSnackBar\r\n  ) { }\r\n  \r\n  @ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;\r\n\r\n  ngOnInit() {\r\n    this.getBrand();\r\n    this.createForm();\r\n  }\r\n\r\n  createForm(){\r\n    this.formAdd = this.fb.group({\r\n      name: [null, Validators.required],\r\n    })\r\n  }\r\n  getBrand(){\r\n    this._settingsService.getBrands().subscribe(\r\n      (res:any) => {\r\n        this.brand = res;\r\n        \r\n        this.brand.sort((a, b) => {\r\n                  return (b.id - a.id)\r\n                })\r\n\r\n        this.dataSource = new MatTableDataSource(this.brand);\r\n        this.dataSource.paginator = this.paginator;\r\n      }\r\n    );\r\n  }\r\n  \r\n  onSubmit(){\r\n    this.addBrand();\r\n  }\r\n\r\n  addBrand(){\r\n    const data = this.formAdd.value;\r\n    const formData = new FormData();\r\n\r\n    formData.append('image', this.selectedImage[0]),\r\n    formData.append('name', data.name )\r\n    console.log(this.selectedImage[0]);\r\n    \r\n    \r\n    this._settingsService.addBrand(formData).subscribe(\r\n      res => {\r\n        console.log(res);\r\n        this._settingsService.openSnackBar('success', `Tipo ${res.name} creado con éxito!!`)\r\n        this.getBrand()\r\n        this.formAdd.reset();\r\n        this.mostrar = false;\r\n      },\r\n      err => {\r\n        console.log(err);\r\n        \r\n        this._settingsService.openSnackBar('error', `${err}`)\r\n      },\r\n    )\r\n  }\r\n\r\n  deleteReg(id:number){\r\n    this._settingsService.deleteBrand(id).subscribe(\r\n      res => {\r\n        this._settingsService.openSnackBar('success', `Tipo \"${res.name}\" eliminado con éxito!!`)\r\n        this.getBrand()\r\n        this.formAdd.reset();\r\n        this.mostrar = false;\r\n      },\r\n      err =>{\r\n        this._settingsService.openSnackBar('success', err)\r\n\r\n      }\r\n    )\r\n  }\r\n  applyFilter(filterValue: string) {\r\n    this.dataSource.filter = filterValue.trim().toLowerCase();\r\n  }\r\n\r\n\r\n    ///////EDIT\r\n    openEdit(element: any) {\r\n      this.mostrar = false;\r\n      this.formAdd.reset();\r\n      this.edit = false;\r\n      this.edit = true;\r\n      setTimeout(() => {\r\n      this.formAdd.setValue(\r\n        {\r\n          name: element.name,\r\n        }\r\n      )\r\n\r\n\r\n      this.idUpdate = element.id;\r\n      this.mostrar = true;\r\n      console.log(element);\r\n      },500)\r\n    }\r\n  \r\n    update(id:number) {\r\n      const data = this.formAdd.value;\r\n      const formData = new FormData();\r\n  \r\n      console.log(data);\r\n      \r\n      formData.append('_method', 'PUT')\r\n      formData.append('image', this.selectedImage[0])\r\n      formData.append('name', data.name )\r\n      console.log(formData.get('name'));\r\n      \r\n      this._settingsService.updateBrand(id, formData).subscribe(\r\n        res => {\r\n          console.log(res);\r\n          this._settingsService.openSnackBar('success', `Marca ${res.name} Actualizado con éxito!!`)\r\n          this.getBrand()\r\n          this.formAdd.reset();\r\n          this.mostrar = false;\r\n          this.idUpdate = null;\r\n        },\r\n        err => {\r\n          console.log(err);\r\n  \r\n          this._settingsService.openSnackBar('error', `${err}`)\r\n        },\r\n      )\r\n    }  \r\n    \r\n    oculta(estado) {\r\n      this.edit = false;\r\n      this.formAdd.reset();\r\n      this.mostrar = estado\r\n    }\r\n\r\n\r\n  changeImage(e){\r\n    \r\n    if(e.target.files && e.target.files[0]){\r\n      const selectedFiles = <FileList>e.target.files;\r\n      this.selectedImage = selectedFiles;\r\n      console.log(selectedFiles);\r\n      // console.log(this.files);\r\n      \r\n\r\n      // this._publishService.uploadImage(this.publicationID, selectedFiles, index)\r\n      // .subscribe(\r\n      //   (event: HttpEvent<Object>) => {\r\n          \r\n      //     // console.log(event);\r\n      //     if (event.type === HttpEventType.Response) {\r\n      //       console.log('Upload Concluído');\r\n      //       console.log(event.body);\r\n      //       this.publication = event.body;\r\n      //       this.getImages();\r\n      //     } else if (event.type === HttpEventType.UploadProgress) {\r\n      //       const percentDone = Math.round((event.loaded * 100) / event.total);\r\n      //       // console.log('Progresso', percentDone);\r\n      //       this.progress = percentDone;\r\n      //     }\r\n      //   }\r\n      // )\r\n    }\r\n    \r\n  }\r\n}\r\n","<div class=\"content\">\r\n    <mat-card>\r\n        <ng-container *ngIf=\"mostrar; then muestra; else oculto\"></ng-container>\r\n        <ng-template #muestra>\r\n            <form [formGroup]=\"formAdd\">\r\n                <mat-form-field class=\"brand\">\r\n                    <input type=\"text\" placeholder=\"Selecciona la Marca\" aria-label=\"Selecciona la Marca\" matInput\r\n                        formControlName=\"brand_id\" [matAutocomplete]=\"brands\" >\r\n                    <mat-autocomplete #brands=\"matAutocomplete\" (optionSelected)=\"getModels($event)\" [displayWith]=\"displayFn\">\r\n                        <mat-option *ngFor=\"let option of filteredOptionsBrand | async\" [value]=\"option\">\r\n                            {{option.name}}\r\n                        </mat-option>\r\n                    </mat-autocomplete>\r\n                </mat-form-field>\r\n\r\n                <mat-form-field class=\"model\">\r\n                    <input type=\"text\" placeholder=\"Selecciona el Modelo\" aria-label=\"Selecciona el Modelo\" matInput\r\n                        formControlName=\"vehicle_model_id\" [matAutocomplete]=\"model\">\r\n                    <mat-autocomplete #model=\"matAutocomplete\" [displayWith]=\"displayFn\">\r\n                        <mat-option *ngFor=\"let option of filteredOptionsModel | async\" [value]=\"option\">\r\n                            {{option.name}}\r\n                        </mat-option>\r\n                    </mat-autocomplete>\r\n                </mat-form-field>\r\n                <mat-form-field class=\"add\">\r\n                    <input formControlName=\"name\" matInput placeholder=\"Nuevo Sub-Modelo\">\r\n                </mat-form-field>\r\n\r\n                <button *ngIf=\"!edit\" class=\"btn\" (click)=\"onSubmit()\" [disabled]=\"!formAdd.valid\" mat-button>Agregar</button>\r\n                <button *ngIf=\"edit\" class=\"btn\" (click)=\"update(idUpdate)\" [disabled]=\"!formAdd.valid\" mat-button>Guardar Cambio</button>\r\n                <button class=\"no-shadow\" mat-mini-fab aria-label=\"Cerrar\" (click)=\"oculta(mostrar = !mostrar)\">\r\n                    <mat-icon>close</mat-icon>\r\n                </button>\r\n            </form>\r\n        </ng-template>\r\n        <ng-template #oculto>\r\n            <button class=\"btn\" mat-mini-fab aria-label=\"Agregar Nuevo\" (click)=\"mostrar = !mostrar\">\r\n                <mat-icon>add</mat-icon>\r\n            </button>\r\n        </ng-template>\r\n\r\n\r\n        <mat-form-field>\r\n            <input matInput (keyup)=\"applyFilter($event.target.value)\" placeholder=\"Filtrar\">\r\n        </mat-form-field>\r\n\r\n        <table mat-table [dataSource]=\"dataSource\" class=\"mat-elevation-z8\">\r\n\r\n            <!-- ID Column -->\r\n            <ng-container matColumnDef=\"id\">\r\n                <th mat-header-cell *matHeaderCellDef> ID </th>\r\n                <td mat-cell *matCellDef=\"let element\"> {{element.id}} </td>\r\n            </ng-container>\r\n\r\n            <!-- name Column -->\r\n            <ng-container matColumnDef=\"name\">\r\n                <th mat-header-cell *matHeaderCellDef> Nombre </th>\r\n                <td mat-cell *matCellDef=\"let element\"> {{element.name}} </td>\r\n            </ng-container>\r\n\r\n            <ng-container matColumnDef=\"brand\">\r\n                <th mat-header-cell *matHeaderCellDef> Marca </th>\r\n                <td mat-cell *matCellDef=\"let element\">\r\n                    <span>{{element.vehicle_model.brand.name}}</span>\r\n                </td>\r\n            </ng-container>\r\n\r\n            <ng-container matColumnDef=\"model\">\r\n                <th mat-header-cell *matHeaderCellDef> Modelo </th>\r\n                <td mat-cell *matCellDef=\"let element\">\r\n                    <span>{{element.vehicle_model.name}}</span>\r\n                </td>\r\n            </ng-container>\r\n\r\n            <ng-container matColumnDef=\"image_url\">\r\n                <th mat-header-cell *matHeaderCellDef> Logo </th>\r\n                <td mat-cell *matCellDef=\"let element\">\r\n                    <img class=\"image\" [src]=\"urlFiles+element.vehicle_model.brand.image_url\">\r\n                </td>\r\n            </ng-container>\r\n\r\n            <ng-container matColumnDef=\"acciones\">\r\n                <th mat-header-cell *matHeaderCellDef> Accioes </th>\r\n                <td class=\"acciones\" mat-cell *matCellDef=\"let element\">\r\n                    <button mat-icon-button color=\"warn\" \r\n                    aria-label=\"Eliminar Registro\"\r\n                    (click)=\"deleteReg(element.id)\">\r\n                        <mat-icon>delete</mat-icon>\r\n                    </button>\r\n                    <button mat-icon-button class=\"ico-edit\" aria-label=\"Editar Registro\" (click)=\"openEdit(element)\">\r\n                        <mat-icon>edit</mat-icon>\r\n                    </button>\r\n                </td>\r\n            </ng-container>\r\n\r\n            <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n            <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n        </table>\r\n        <mat-paginator [pageSizeOptions]=\"[20,50,100]\" showFirstLastButtons></mat-paginator>\r\n    </mat-card>\r\n</div>","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { SettingApiService } from '../services/setting-api.service';\r\nimport { VehicleSubModel, Brand, VehicleModel } from 'src/app/interfaces/resultado';\r\nimport { MatAutocompleteSelectedEvent } from '@angular/material/autocomplete/autocomplete';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { FormGroup, FormBuilder, ValidatorFn, AbstractControl, Validators } from '@angular/forms';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\nimport { startWith, map } from 'rxjs/operators';\r\n\r\n@Component({\r\n  templateUrl: './submodel.component.html',\r\n  styleUrls: ['./submodel.component.scss']\r\n})\r\nexport class SubmodelComponent implements OnInit {\r\n  displayedColumns: string[] = ['id', 'name', 'brand', 'model', 'image_url', 'acciones'];\r\n  subModel: VehicleSubModel[];\r\n  vehicleModel: VehicleModel[];\r\n  brands: Brand[];\r\n  dataSource: any;\r\n  urlFiles = `${environment.urlFiles}`;\r\n\r\n  formAdd: FormGroup\r\n  mostrar: boolean = false;\r\n  filteredOptionsBrand: Observable<Brand[]>;\r\n  filteredOptionsModel: Observable<VehicleModel[]>;\r\n  idUpdate: any;\r\n  edit: boolean;\r\n\r\n  constructor(\r\n    private _settingsService: SettingApiService,\r\n    private fb: FormBuilder,\r\n    private _snackBar: MatSnackBar,\r\n  ) { }\r\n\r\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\r\n\r\n  ngOnInit() {\r\n    this.selectBrand()\r\n    this.getSubModel()\r\n\r\n  }\r\n\r\n  onSubmit() {\r\n\r\n    this.addSubModel();\r\n  }\r\n\r\n  addSubModel() {\r\n    const data = {\r\n      model_id: this.formAdd.controls.vehicle_model_id.value.id,\r\n      name: this.formAdd.controls.name.value\r\n    }\r\n\r\n    console.log(data);\r\n\r\n    this._settingsService.addSubModel(data).subscribe(\r\n      res => {\r\n        console.log(res);\r\n        this._settingsService.openSnackBar('success', `Sub-Modelo ${res.name} creado con éxito!!`)\r\n        this.getSubModel()\r\n        this.formAdd.reset();\r\n        this.mostrar = false;\r\n      },\r\n      err => {\r\n        console.log(err);\r\n\r\n        this._settingsService.openSnackBar('error', `${err}`)\r\n      },\r\n    )\r\n  }\r\n\r\n\r\n  /// INPUT SELECT MARCA autocomplete\r\n  selectBrand() {\r\n    this._settingsService.getBrands().subscribe(\r\n      (brands: any) => {\r\n        this.brands = brands\r\n        this.createForm();\r\n\r\n        // console.log(brands)\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n  selectChangesBrand() {\r\n    if (this.brands) {\r\n\r\n      this.filteredOptionsBrand = this.formAdd.controls.brand_id.valueChanges\r\n        .pipe(\r\n          startWith(''),\r\n          map(value => typeof value === 'string' ? value : value.name),\r\n          map(name => name ? this._filter(name, this.brands) : this.brands.slice())\r\n\r\n        );\r\n      console.log(this.filteredOptionsBrand);\r\n\r\n    }\r\n\r\n  }\r\n  selectChangesModel() {\r\n    if (this.vehicleModel) {\r\n      this.filteredOptionsModel = this.formAdd.controls.vehicle_model_id.valueChanges\r\n        .pipe(\r\n          startWith(''),\r\n          map(value => typeof value === 'string' ? value : value.name),\r\n          map(name => name ? this._filter(name, this.vehicleModel) : this.vehicleModel.slice())\r\n\r\n        );\r\n\r\n    }\r\n\r\n\r\n  }\r\n\r\n  displayFn(table?: any): string | undefined {\r\n\r\n    return table ? table.name : undefined;\r\n  }\r\n\r\n\r\n  private _filter(name: string, tabla: any): any[] {\r\n    const filterValue = name.toLowerCase();\r\n\r\n    return tabla.filter(option => option.name.toLowerCase().indexOf(filterValue) === 0);\r\n  }\r\n\r\n  ///////////////\r\n\r\n\r\n  getSubModel() {\r\n    this._settingsService.getSubModel().subscribe(\r\n      (res: any) => {\r\n        this.subModel = res.reverse();\r\n        this.dataSource = new MatTableDataSource(this.subModel);\r\n        this.dataSource.paginator = this.paginator;\r\n\r\n      }\r\n    );\r\n  }\r\n\r\n  getModels(e: MatAutocompleteSelectedEvent) {\r\n    this.formAdd.controls.vehicle_model_id.reset()\r\n    console.log(e.option.value)\r\n    this.vehicleModel = e.option.value.vehicle_models\r\n    this.selectChangesModel()\r\n    console.log(this.vehicleModel);\r\n    // this._settingsService.getModelsByIDBrand(brand_id).subscribe(\r\n    //   (res: any) => {\r\n    //     this.vehicleModel = res.vehicle_models;\r\n    //   }\r\n    // );\r\n  }\r\n\r\n  createForm() {\r\n    this.formAdd = this.fb.group({\r\n      name: [null, Validators.required],\r\n      brand_id: [null, Validators.compose(\r\n        [Validators.required, this.autocompleteObjectValidator()]\r\n      )],\r\n      vehicle_model_id: [null, Validators.compose(\r\n        [Validators.required, this.autocompleteObjectValidator()]\r\n      )],\r\n    })\r\n    this.selectChangesBrand()\r\n    this.selectChangesModel()\r\n\r\n\r\n  }\r\n\r\n\r\n  ///////EDIT\r\n  openEdit(element: any) {\r\n    this.oculta(this.mostrar = !this.mostrar)\r\n\r\n    console.log(element);\r\n    setTimeout(() => {\r\n      this.formAdd.setValue(\r\n        {\r\n          name: element.name,\r\n          vehicle_model_id: element.vehicle_model,\r\n          brand_id: element.vehicle_model.brand\r\n        }\r\n      )\r\n      this.idUpdate = element.id;\r\n      this.mostrar = true;\r\n      this.edit = true;\r\n    }, 100)\r\n  }\r\n\r\n  update(id: number) {\r\n\r\n    const data = {\r\n      model_id: this.formAdd.controls.vehicle_model_id.value.id,\r\n      name: this.formAdd.controls.name.value\r\n    }\r\n\r\n    console.log(data);\r\n\r\n    this._settingsService.updateSubModel(id, data).subscribe(\r\n      res => {\r\n        console.log(res);\r\n        this._settingsService.openSnackBar('success', `Sub Modelo ${res.name} Actualizado con éxito!!`)\r\n        this.getSubModel()\r\n        this.formAdd.reset();\r\n        this.mostrar = false;\r\n        this.idUpdate = null;\r\n      },\r\n      err => {\r\n        console.log(err);\r\n\r\n        this._settingsService.openSnackBar('error', `${err}`)\r\n      },\r\n    )\r\n  }\r\n\r\n  oculta(estado) {\r\n    this.edit = false;\r\n    this.formAdd.reset();\r\n    this.mostrar = estado\r\n  }\r\n  //////////\r\n\r\n  applyFilter(filterValue: string) {\r\n    this.dataSource.filter = filterValue.trim().toLowerCase();\r\n  }\r\n\r\n\r\n  deleteReg(id: number) {\r\n    this._settingsService.deleteSubModel(id).subscribe(\r\n      res => {\r\n        this._settingsService.openSnackBar('success', `Modelo \"${res.name}\" eliminado con éxito!!`)\r\n        this.getSubModel()\r\n        this.formAdd.reset();\r\n        this.mostrar = false;\r\n      },\r\n      err => {\r\n        this._settingsService.openSnackBar('success', err)\r\n\r\n      }\r\n    )\r\n  }\r\n  ////VALIDA CAMPO AUTOCOMPLETE\r\n  autocompleteObjectValidator(): ValidatorFn {\r\n    return (control: AbstractControl): { [key: string]: any } | null => {\r\n      if (typeof control.value === 'string') {\r\n        return { 'invalidAutocompleteObject': { value: control.value } }\r\n      }\r\n      return null  /* valid option selected */\r\n    }\r\n  }\r\n  ////\r\n}\r\n","<div class=\"content\">\r\n    <mat-card>\r\n        <ng-container *ngIf=\"mostrar; then muestra; else oculto\"></ng-container>\r\n        <ng-template #muestra>\r\n            <form [formGroup]=\"formAdd\" (ngSubmit)=\"onSubmit()\">\r\n                <mat-form-field class=\"attribute\">\r\n                    <mat-label>Si corresponde Característica a la que pertenece</mat-label>\r\n                    <mat-select formControlName=\"attribute_id\">\r\n                        <mat-option>Ningúna</mat-option>\r\n                        <mat-option *ngFor=\"let option of attributes\" [value]=\"option.id\">{{ option.name }}</mat-option>\r\n                    </mat-select>\r\n                </mat-form-field>\r\n                <mat-form-field class=\"add\">\r\n                    <input formControlName=\"name\" matInput placeholder=\"Nueva Característica\">\r\n                </mat-form-field>\r\n               \r\n                <button class=\"btn\" [disabled]=\"!formAdd.valid\" type=\"submit\" mat-button >Agregar</button>\r\n            </form>\r\n        </ng-template>\r\n        <ng-template #oculto>\r\n            <button class=\"btn\" mat-mini-fab aria-label=\"Agregar Nuevo\"\r\n            (click)=\"mostrar = !mostrar\">\r\n                <mat-icon>add</mat-icon>\r\n            </button>\r\n        </ng-template>\r\n\r\n        <mat-form-field>\r\n            <input matInput (keyup)=\"applyFilter($event.target.value)\" placeholder=\"Filtrar\">\r\n        </mat-form-field>\r\n\r\n        <table mat-table [dataSource]=\"dataSource\" class=\"mat-elevation-z8\">\r\n\r\n            <!-- ID Column -->\r\n            <ng-container matColumnDef=\"id\">\r\n                <th mat-header-cell *matHeaderCellDef> ID </th>\r\n                <td mat-cell *matCellDef=\"let element\"> {{element.id}} </td>\r\n            </ng-container>\r\n\r\n            <!-- name Column -->\r\n            <ng-container matColumnDef=\"name\">\r\n                <th mat-header-cell *matHeaderCellDef> Nombre </th>\r\n                <td mat-cell *matCellDef=\"let element\"> {{element.name}} </td>\r\n            </ng-container>\r\n\r\n            \r\n            <ng-container matColumnDef=\"depend\" >\r\n                <th mat-header-cell *matHeaderCellDef> Corresponde a </th>\r\n                <td mat-cell *matCellDef=\"let element\"> \r\n                    <ng-container *ngIf=\"element.attribute; else elseTemplate\">\r\n                        {{element.attribute.name}} \r\n                    </ng-container>\r\n                    <ng-template #elseTemplate>\r\n                        N/A\r\n                    </ng-template>\r\n                </td>\r\n            </ng-container>\r\n\r\n            <ng-container matColumnDef=\"acciones\">\r\n                <th mat-header-cell *matHeaderCellDef> Accioes </th>\r\n                <td class=\"acciones\" mat-cell *matCellDef=\"let element\">\r\n                    <button mat-icon-button color=\"warn\" \r\n                    aria-label=\"Eliminar Registro\"\r\n                    (click)=\"deleteReg(element.id)\">\r\n                        <mat-icon>delete</mat-icon>\r\n                    </button>\r\n                </td>\r\n            </ng-container>\r\n            <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n            <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n        </table>\r\n        <mat-paginator [pageSizeOptions]=\"[20,50,100]\" showFirstLastButtons></mat-paginator>\r\n    </mat-card>\r\n</div>","<div class=\"content\">\r\n    <mat-card>\r\n        <ng-container *ngIf=\"mostrar; then muestra; else oculto\"></ng-container>\r\n        <ng-template #muestra>\r\n            <form [formGroup]=\"formAdd\" (ngSubmit)=\"onSubmit()\">\r\n                <mat-form-field class=\"add\">\r\n                    <input formControlName=\"name\" matInput placeholder=\"Nueva Característica Extra\">\r\n                </mat-form-field>\r\n               \r\n                <button class=\"btn\" [disabled]=\"!formAdd.valid\" type=\"submit\" mat-button >Agregar</button>\r\n            </form>\r\n        </ng-template>\r\n        <ng-template #oculto>\r\n            <button class=\"btn\" mat-mini-fab aria-label=\"Agregar Nuevo\"\r\n            (click)=\"mostrar = !mostrar\">\r\n                <mat-icon>add</mat-icon>\r\n            </button>\r\n        </ng-template>\r\n\r\n        <mat-form-field>\r\n            <input matInput (keyup)=\"applyFilter($event.target.value)\" placeholder=\"Filtrar\">\r\n        </mat-form-field>\r\n\r\n        <table mat-table [dataSource]=\"dataSource\" class=\"mat-elevation-z8\">\r\n\r\n            <!-- ID Column -->\r\n            <ng-container matColumnDef=\"id\">\r\n                <th mat-header-cell *matHeaderCellDef> ID </th>\r\n                <td mat-cell *matCellDef=\"let element\"> {{element.id}} </td>\r\n            </ng-container>\r\n\r\n            <!-- name Column -->\r\n            <ng-container matColumnDef=\"name\">\r\n                <th mat-header-cell *matHeaderCellDef> Nombre </th>\r\n                <td mat-cell *matCellDef=\"let element\"> {{element.name}} </td>\r\n            </ng-container>\r\n\r\n\r\n            <ng-container matColumnDef=\"acciones\">\r\n                <th mat-header-cell *matHeaderCellDef> Accioes </th>\r\n                <td class=\"acciones\" mat-cell *matCellDef=\"let element\">\r\n                    <button mat-icon-button color=\"warn\" \r\n                    aria-label=\"Eliminar Registro\"\r\n                    (click)=\"deleteReg(element.id)\">\r\n                        <mat-icon>delete</mat-icon>\r\n                    </button>\r\n                </td>\r\n            </ng-container>\r\n            <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n            <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n        </table>\r\n        <mat-paginator [pageSizeOptions]=\"[20,50,100]\" showFirstLastButtons></mat-paginator>\r\n    </mat-card>\r\n</div>","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { Extras } from 'src/app/interfaces/product';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { SettingApiService } from '../services/setting-api.service';\r\n\r\n@Component({\r\n  selector: 'app-extras',\r\n  templateUrl: './extras.component.html',\r\n  styleUrls: ['./extras.component.scss']\r\n})\r\nexport class ExtrasComponent implements OnInit {\r\n  displayedColumns: string[] = ['id', 'name', 'acciones' ];\r\n  dataSource: any;\r\n  formAdd : FormGroup\r\n  mostrar :boolean = false;\r\n  selectedImage: FileList;\r\n  extras: Extras[];\r\n\r\n  @ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;\r\n\r\n  constructor(\r\n    private _settingsService: SettingApiService,\r\n    private fb: FormBuilder,\r\n    private _snackBar: MatSnackBar\r\n  ) { }\r\n\r\n\r\n  ngOnInit() {\r\n    this.getExtras();\r\n    this.createForm();\r\n  }\r\n\r\n  createForm(){\r\n    this.formAdd = this.fb.group({\r\n      name: [null, Validators.required],\r\n    })\r\n  }\r\n  getExtras(){\r\n    this._settingsService.getExtras().subscribe(\r\n      (res:any) => {\r\n        this.extras = res.reverse();\r\n        \r\n        this.dataSource = new MatTableDataSource(this.extras);\r\n        this.dataSource.paginator = this.paginator;\r\n      }\r\n    );\r\n  }\r\n  \r\n  onSubmit(){\r\n    this.addExtra();\r\n  }\r\n\r\n  addExtra(){\r\n    const data = this.formAdd.value;\r\n        \r\n    this._settingsService.addExtra(data).subscribe(\r\n      res => {\r\n        console.log(res);\r\n        this._settingsService.openSnackBar('success', `Caracteristica extra ${res.name} creado con éxito!!`)\r\n        this.getExtras()\r\n        this.formAdd.reset();\r\n        this.mostrar = false;\r\n      },\r\n      err => {\r\n        console.log(err);\r\n        \r\n        this._settingsService.openSnackBar('error', `${err}`)\r\n      },\r\n    )\r\n  }\r\n\r\n  deleteReg(id:number){\r\n    this._settingsService.deleteExtra(id).subscribe(\r\n      res => {\r\n        this._settingsService.openSnackBar('success', `Caracteristica extra \"${res.name}\" eliminado con éxito!!`)\r\n        this.getExtras()\r\n        this.formAdd.reset();\r\n        this.mostrar = false;\r\n      },\r\n      err =>{\r\n        this._settingsService.openSnackBar('success', err)\r\n\r\n      }\r\n    )\r\n  }\r\n  applyFilter(filterValue: string) {\r\n    this.dataSource.filter = filterValue.trim().toLowerCase();\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { environment } from 'src/environments/environment';\r\nimport { SettingApiService } from '../services/setting-api.service';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { Attributes } from 'src/app/interfaces/product';\r\n\r\n@Component({\r\n  selector: 'app-attributes',\r\n  templateUrl: './attributes.component.html',\r\n  styleUrls: ['./attributes.component.scss']\r\n})\r\nexport class AttributesComponent implements OnInit {\r\n\r\n  displayedColumns: string[] = ['id', 'name', 'depend', 'acciones' ];\r\n  dataSource: any;\r\n  formAdd : FormGroup\r\n  mostrar :boolean = false;\r\n  selectedImage: FileList;\r\n  attributes: Attributes[];\r\n\r\n  @ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;\r\n\r\n  constructor(\r\n    private _settingsService: SettingApiService,\r\n    private fb: FormBuilder,\r\n    private _snackBar: MatSnackBar\r\n  ) { }\r\n\r\n\r\n  ngOnInit() {\r\n    this.getAttributes();\r\n    this.createForm();\r\n  }\r\n\r\n  createForm(){\r\n    this.formAdd = this.fb.group({\r\n      attribute_id: [null],\r\n      name: [null, Validators.required],\r\n    })\r\n  }\r\n  getAttributes(){\r\n    this._settingsService.getAttributes().subscribe(\r\n      (res:any) => {\r\n        this.attributes = res.reverse();\r\n        console.log(this.attributes);\r\n        \r\n        this.dataSource = new MatTableDataSource(this.attributes);\r\n        this.dataSource.paginator = this.paginator;\r\n      }\r\n    );\r\n  }\r\n  \r\n  onSubmit(){\r\n    this.addAttribute();\r\n  }\r\n\r\n  addAttribute(){\r\n    const data = this.formAdd.value;\r\n        \r\n    this._settingsService.addAttribute(data).subscribe(\r\n      res => {\r\n        console.log(res);\r\n        this._settingsService.openSnackBar('success', `Atributo ${res.name} creado con éxito!!`)\r\n        this.getAttributes()\r\n        this.formAdd.reset();\r\n        this.mostrar = false;\r\n      },\r\n      err => {\r\n        console.log(err);\r\n        \r\n        this._settingsService.openSnackBar('error', `${err}`)\r\n      },\r\n    )\r\n  }\r\n\r\n  deleteReg(id:number){\r\n    this._settingsService.deleteAttribute(id).subscribe(\r\n      res => {\r\n        this._settingsService.openSnackBar('success', `Atributo \"${res.name}\" eliminado con éxito!!`)\r\n        this.getAttributes()\r\n        this.formAdd.reset();\r\n        this.mostrar = false;\r\n      },\r\n      err =>{\r\n        this._settingsService.openSnackBar('success', err)\r\n\r\n      }\r\n    )\r\n  }\r\n  applyFilter(filterValue: string) {\r\n    this.dataSource.filter = filterValue.trim().toLowerCase();\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { TipoVehicleComponent } from './tipo-vehicle/tipo-vehicle.component';\r\nimport { ModelsComponent } from './models-vehicles/models.component';\r\nimport { BrandsComponent } from './brands/brands.component';\r\nimport { SubmodelComponent } from './submodel/submodel.component';\r\nimport { AttributesComponent } from './attributes/attributes.component';\r\nimport { ExtrasComponent } from './extras/extras.component';\r\n\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: 'tipo-vehiculo',\r\n    component: TipoVehicleComponent\r\n  },\r\n  {\r\n    path: 'marcas',\r\n    component: BrandsComponent\r\n  },\r\n  {\r\n    path: 'modelos',\r\n    component: ModelsComponent\r\n  },\r\n  {\r\n    path: 'sub-modelos',\r\n    component: SubmodelComponent\r\n  },\r\n  {\r\n    path: 'atributos',\r\n    component: AttributesComponent\r\n  },\r\n  {\r\n    path: 'extras',\r\n    component: ExtrasComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class SettingApiRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { SettingApiRoutingModule } from './setting-api-routing.module';\r\nimport { TipoVehicleComponent } from './tipo-vehicle/tipo-vehicle.component';\r\nimport { BrandsComponent } from './brands/brands.component';\r\nimport { ModelsComponent } from './models-vehicles/models.component';\r\nimport { SubmodelComponent } from './submodel/submodel.component';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { SharedModule } from 'src/app/shared/shared.module';\r\nimport { AttributesComponent } from './attributes/attributes.component';\r\nimport { ExtrasComponent } from './extras/extras.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    TipoVehicleComponent, \r\n    BrandsComponent, \r\n    ModelsComponent, \r\n    SubmodelComponent, AttributesComponent, ExtrasComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    SettingApiRoutingModule,\r\n    ReactiveFormsModule,\r\n    SharedModule\r\n  ]\r\n})\r\nexport class SettingApiModule { }\r\n"]}